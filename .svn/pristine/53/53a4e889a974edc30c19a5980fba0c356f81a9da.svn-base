package com.mini.project.hotel.controller;

import java.text.ParseException;
import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.mini.project.hotel.exception.ResourceNotFoundException;
import com.mini.project.hotel.model.Transaksi;
import com.mini.project.hotel.repository.TransaksiRepository;
import com.mini.project.hotel.services.TransaksiService;

@RestController
@RequestMapping("/pjihotel/api/v1")
public class TransaksiRESTController {
	
	@Autowired
	private TransaksiRepository transaksiRepo;
	
	@Autowired
	private TransaksiService transaksiServ;
	
	// pakai service
	@GetMapping("/getAllTransaksi")
	public List<Transaksi> getAllTransaksi(){
		return transaksiServ.getAllTransaksi();
	}
	
	@GetMapping("/getTransaksiById/{id_transaksi}")
	public ResponseEntity<Transaksi> getTransaksiById(@PathVariable(value = "id_transaksi") int id_transaksi)
	throws ResourceNotFoundException{
		Transaksi transc = transaksiRepo.findById(id_transaksi).orElseThrow(() -> new ResourceNotFoundException("Transaksi dengan id transaksi :"+ id_transaksi + " tidak ditemukan"));
		return ResponseEntity.ok().body(transc);
	}
	
	// pake service
	@PostMapping("/createTransaksi")
	public Transaksi createTransaksi(@Valid @RequestParam int id_customer, int id_room, String check_in_date, String check_in_time, String check_out_date, String check_out_time, int id_status_check, int total_harga) throws ParseException {
		return transaksiServ.createTransaksi(id_customer, id_room, check_in_date, check_in_time, check_out_date, check_out_time, id_status_check, total_harga);
	}
	
//	@PostMapping()
	
//	@PostMapping("/createTransaksi")
//	public Transaksi createTransaksi(@Valid @RequestBody Customer customer, int id_room, String check_in_date, String check_in_time, String check_out_date, String check_out_time, int id_status_check, int total_harga) throws ParseException {
////		return transaksiRepo.save(transaksi);
//		return transaksiServ.createTransaksi( customer, id_room, check_in_date, check_in_time, check_out_date, check_out_time, id_status_check, total_harga);
//	}
	
	
}
