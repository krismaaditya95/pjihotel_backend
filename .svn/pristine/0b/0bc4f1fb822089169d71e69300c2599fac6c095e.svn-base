package com.mini.project.hotel.controller;

import java.text.ParseException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.mini.project.hotel.exception.ResourceNotFoundException;
import com.mini.project.hotel.repository.TransaksiRepository;
import com.mini.project.hotel.services.CustomerService;

@Controller
@RequestMapping("/pjihotel")
public class TransaksiMvcController {
	
	@Autowired
	public TransaksiRESTController transaksiREST;
	
	@Autowired
	public CustomerRESTController customerREST;
	
	@Autowired
	public KamarRESTController kamarREST;

	@Autowired
	public TransaksiRepository transaksiRepo;
	
	@Autowired
	CustomerService custServ;
	
	
	
	@RequestMapping(value = "/", method=RequestMethod.GET)
	public String showHomePage(ModelMap model) {
//		model.put("transactions", transaksiREST.getAllTransaksi());
	  	return "home";
	}
	
	@RequestMapping(value = "/welcome", method=RequestMethod.GET)
	public String showWelcomePage(ModelMap model) {
//		model.put("transactions", transaksiREST.getAllTransaksi());
	  	return "welcome";
	}
	
	@RequestMapping(value = "/transaksi", method=RequestMethod.GET)
	public String showTransaksiPage(ModelMap model) {
		
		// #1 memakai rest controller langsung
		model.put("transactions", transaksiREST.getAllTransaksi());
		
		// #2 memakai transaksi service
//		model.put("transactions", tranServ.viewTransaksi());
		
		// #3 memakai transaksi repository
		//model.put("transactions", transaksiRepo.findAll());
	  	return "transaksi";
	}
	
//	@RequestMapping(value = "/transaksi/{halaman}/{jumlah_records}", method=RequestMethod.GET)
//	public String showTransaksiPageable(ModelMap model, @PathVariable(value="halaman") int halaman, @PathVariable(value="jumlah_records") int jumlah_records) {
//		model.put("halaman", transaksiREST.getAllTransaksiPageable(halaman, jumlah_records));
//		
//		return "transaksi";
//	}
	
	@RequestMapping(value="/transaksi/catat", method=RequestMethod.GET)
	public String showTransaksiEdit(ModelMap model) throws ResourceNotFoundException {
//		model.put("customerdata", custServ.getAllCustomers());
		model.put("customerdata", customerREST.getAllCustomers());
//		model.put("kamars", kamarREST.getAllKamar());
		// menampilkan kamar yang tersedia
		model.put("kamars", kamarREST.getKamarByIdStatus(1));
		model.put("statuschecks", transaksiREST.getAllStatusCheck());
		return "tambah-transaksi";
	}
	
	
//	@RequestMapping(value="/transaksi/catat", method=RequestMethod.POST)
//	public String tambahTransaksi(ModelMap model, @RequestParam int id_customer, int id_room, DateFormat check_in_date, DateFormat check_in_time, DateFormat check_out_date, DateFormat check_out_time, int id_status_check, int total_harga) {
//		tranServ.addTransaksi(id_customer, id_room, check_in_date, check_in_time, check_out_date, check_out_time, id_status_check, total_harga);
//		//tranServ.addTransaksi(id_customer, id_room, check_in_date, check_in_time, check_out_date, check_out_time, id_status_check, total_harga)
//		return "redirect:/transaksi";
//	}
	
	@RequestMapping(value="/transaksi/catat", method=RequestMethod.POST, consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE, produces = {MediaType.APPLICATION_ATOM_XML_VALUE, MediaType.APPLICATION_JSON_VALUE})
	public String tambahTransaksi(ModelMap model, @RequestParam int idCustomer, int idKamar, String check_in_date, String check_in_time, String check_out_date, String check_out_time, int idStatusCheck) throws ParseException {
//		int id_customer_int = Integer.parseInt(id_customer);
		transaksiREST.createTransaksi(idCustomer, idKamar, check_in_date, check_in_time, check_out_date, check_out_time, idStatusCheck);
//		tranServ.createTransaksi(id_customer_int, id_room, check_in_date, check_in_time, check_out_date, check_out_time, id_status_check, total_harga);
		//tranServ.addTransaksi(id_customer, id_room, check_in_date, check_in_time, check_out_date, check_out_time, id_status_check, total_harga)
		return "redirect:/pjihotel/transaksi";
	}
	
//	@RequestMapping(value="/transaksi/catat", method=RequestMethod.POST)
//	public String tambahTransaksi(ModelMap model, @RequestParam Customer customer, int id_room, String check_in_date, String check_in_time, String check_out_date, String check_out_time, int id_status_check, int total_harga) throws ParseException {
//		tranServ.createTransaksi(customer, id_room, check_in_date, check_in_time, check_out_date, check_out_time, id_status_check, total_harga);
//		//tranServ.addTransaksi(id_customer, id_room, check_in_date, check_in_time, check_out_date, check_out_time, id_status_check, total_harga)
//		return "redirect:/pjihotel/transaksi";
//	}
	
	// get halaman
	@RequestMapping(value = "/edit-transaksi/{id_transaksi}", method=RequestMethod.GET)
	public String showEditTransaksiPage(ModelMap model, @PathVariable(value = "id_transaksi") Integer id_transaksi) throws ResourceNotFoundException {
//		model.put("customerlist", custRestCon.getAllCustomers());
		model.put("customerdata", customerREST.getAllCustomers());
		model.put("kamars", kamarREST.getAllKamar());
		model.put("statuschecks", transaksiREST.getAllStatusCheck());
		model.put("transaksiedit", transaksiREST.getTransaksiById(id_transaksi));
		return "edit-transaksi";
	}
		
	// post edit
	@RequestMapping(value = "/edit-transaksi/{id_transaksi}", method=RequestMethod.POST)
	public String editTransaksi(ModelMap model, @PathVariable(value = "id_transaksi")Integer id_transaksi, @RequestParam int idCustomer, int idKamar, String check_in_date, String check_in_time, String check_out_date, String check_out_time, int idStatusCheck) throws ResourceNotFoundException, ParseException {
//		model.put("customerlist", custRestCon.getAllCustomers());
//		model.put("customeredit", custRestCon.getCustomerById(id_customer));
		transaksiREST.editTransaksiById(id_transaksi, idCustomer, idKamar, check_in_date, check_in_time, check_out_date, check_out_time, idStatusCheck);
		return "redirect:/pjihotel/transaksi";
	}
	
	@RequestMapping(value = "/delete-transaksi/{id_transaksi}", method=RequestMethod.GET)
	public String deleteTransaksi(ModelMap model, @PathVariable(value = "id_transaksi") Integer id_transaksi){
		transaksiREST.deleteTransaksiById(id_transaksi);
		return "redirect:/pjihotel/transaksi";
	}
	
}
